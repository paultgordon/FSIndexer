#
# WinAFC Input File
#
# Lines that start with a '#' and empty lines are ignored. 
# Configuration lines include global flag setting lines, and application profile
# lines. These lines can be interleaved in any order. However, the order in which
# you specify the various application profiles matters if a process could be
# matched by multiple application profiles.

# To run AffinityChanger in TestMode (no affinity settings are modified),
# uncomment the line below and specify a value different than zero. To disable 
# test mode, set the value to 0 or comment the line below.
# It is recommended that you try the input file in test mode first, after you
# make changes, especially if you are unfamiliar with the syntax.
TestMode = 1

# There are several flags that control the verbosity of the program. 
# In general, a higher value means a more verbose output. These flags can 
# be also modified at run-time.

# By default the warning level is set to 2. To change it, uncomment the next 
# line and specify a value>=0. Zero disables warning messages (not recommended).
#WarningLevel = 2

# Logging is done on both console and in a file called 'affinitylog.txt'. 
# Separate flags control the verbosity for each medium. By default the logging
# level is set to 3. Uncomment the next lines to change the values of these 
# flags.
# To change only the console verbosity:
#ConsoleLogLevel = 3
#
# To change only the file verbosity:
#FileLogLevel = 3
#
# To change both mediums at the same time:
#LogLevel = 3

# By default AffinityChanger checks for new processes every 30 seconds.
# To change how frequently AffinityChanger checks for new processes or adjusts
# affinities for existing processes, uncomment the line below and specify the
# number of seconds between consecutve process checks. The minimum accepted 
# value is 1 and the value can be only an integer number.
#TimeInterval = 30

# One can change the value of a flag multiple times. In these cases the 
# most recently specified value will take effect.
#

##################################################
##          Application Profile lines
##################################################
#
# An application profile is specified on a single line. 
# An application profile includes the following information: an application
# name, a CPU mask, and optional attributes in the following format:
# C:\Path\To\Application := CPU0+CPU1 [attr1=val1,attr2=val2]
#
# Check the documentation for more information about these fields.

# While AffinityChanger does not target any particular application, its
# initial development was motivated by the Folding@Home project. Therefore,
# I will provide several Application Profile examples inspired by the FAH
# project.

# This example assume a machine with an Intel Quad Core CPU for which 
# AffinityChanger detected the two PAIRs of cores that share the L2 cache. 
# All profiles use logical CPU IDs in the CPU mask.

# Let's assume the user wants to run a VMWare virtual machine on two of the
# cores that share an L2 cache, and a GPU client on one of the remaining two
# cores. In addition, the user wants AffinityChanger to force the affinity 
# settings even if another program attempts to change them.
# There should be only one vmware-vmx.exe process running. 
# The application profile for the virtual machine can be written as:
*\vmware-vmx.exe := PAIR1 [force=yes]

# In this scenario we assigned the second PAIR of cores to the virtual machine.
# The force attribute specifies that affinity should be always reverted to 
# PAIR1 if an external program changes it.
# We wil assign the second CPU of PAIR0 to the GPU client:
D:\Folding@Home\Folding@home-Win32-GPU_XP-620\FahCore_*.exe := PAIR0::CPU1 [force=yes]

# We assumed the GPU client is installed in 
# "D:\Folding@Home\Folding@home-Win32-GPU_XP-620".
# We used a wildcard to specify the process name to match any GPU FahCore 
# version that might be created by the Stanford team.

# We did not assign any heavy process to CPU PAIR0::CPU0. For a non-dedicated 
# folding machine we could use this CPU for Firefox, Thunderbird, iTunes, or
#  some other application of your choosing, by writing profiles like the ones
# below:
*\firefox.exe := PAIR0::CPU0
*\thunderbird.exe := PAIR0::CPU0
*\itunes.exe := PAIR0::CPU0

#
# You should try any scenario under the TestMode first to verify that it
# does what you expect.
#
